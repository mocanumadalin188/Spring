Design patterns
	- Proxy
		- Transactions
	- Singleton
	- Factory
		getBean(params)
		ApplicationContext
		BeanFactory
	- Template pattern
		Establish a connection
		Execute query
		Perform cleanup
		Close the connection
Reflection
Spring (brief introduction)
	- IoC		
	- DI
	- AOP
Spring Boot (brief introduction)
	- Embedded webserver Tomcat/Jetty
	- Jar
	- maven dependencies without specifying versions
	- annotations
		@SpringBootApplication
		@Configuration
		@ComponentScan
		@EnableAutoConfiguration
IoC container
	- BeanFactory
	- ApplicationContext
	- Default , not lazy (when referenced)
	- Prototype created when referenced
Running a spring boot app
	- CommandLineRunner
Beans
	- Scope (singleton, prototype, session , request, global-session)
	- Annotations 
		@Configuration 
		@Bean 
		@Component
	- Additional bean annotations
	- Bean naming
	- Bean injection
		@Autowired
	- Bean implementations (which one to take)
		- @Qualifier, @Primary
		- Inject all implementations
	- Beans lifecycle
		-@PostConstruct @PreDestroy
Application structure
	- Layers
	- Flow
Spring Data
	- Create a DB , create tables , also generate them with hibernate
	- JDBC (connections)
		- JDBC template
		- Template pattern : https://www.baeldung.com/spring-framework-design-patterns
	- Hibernate (lazy loading)
	- EntityManager
	- Queries (native , HQL)
	- Annotations
	- Repository
	- Entities (relations)
	- MySQL, Redis
	- CrudRepository , JpaRepository, PagingAndSortingRepository
	- Embedded methods (save, findAll, etc).
	- Pagination
Spring REST
	- Controllers, RestController
	- Json . serialization, deserialization
	- Uses reflection
	- ObjectMapper , Jackson, embedded in Spring
	- HTTP methods
	- Controller layer , annotations.

Validations

Exception handling

Transactions
	- ACID
	- Proxy (CGLib vs jdk dynamic proxy)
	- AOP
	- Isolation
	- Propagation
	- Business transaction vs db transaction
	- Bound to a thread , ThreadLocal holds transaction context

Spring MVC
	- MVC design pattern

Spring security

Testing
	- Unit testing
	- End to end testing










NOTES:
Reflection:
	Reflection is (basically) the ability of a program to query for type information that was available to the compiler. So, for example, given the name of a type you can query for the methods it contains. Then for each method you can query for the types of the parameters they take etc etc etc.

	It's useful for runtime configuration where you've got a config file that specifies the behavior of your application. The config may contain the names of concrete types that you should use (as is often the case with IOC containers). Using reflection you can create an instance of this concrete type (via a reflection API) and use it.

AOP:
	Aspect: An aspect is a module that encapsulates advice and pointcuts and provides cross-cutting An application can have any number of aspects. We can implement an aspect using regular class annotated with @Aspect annotation.

	Pointcut: A pointcut is an expression that selects one or more join points where advice is executed. We can define pointcuts using expressions or patterns. It uses different kinds of expressions that matched with the join points. In Spring Framework, AspectJ pointcut expression language is used.

	Join point: A join point is a point in the application where we apply an AOP aspect. Or it is a specific execution instance of an advice. In AOP, join point can be a method execution, exception handling, changing object variable value, etc.

	Advice: The advice is an action that we take either before or after the method execution. The action is a piece of code that invokes during the program execution. There are five types of advices in the Spring AOP framework: before, after, after-returning, after-throwing, and around advice. Advices are taken for a particular join point. We will discuss these advices further in this section.

	Target object: An object on which advices are applied, is called the target object. Target objects are always a proxied It means a subclass is created at run time in which the target method is overridden, and advices are included based on their configuration.

Global session scope:
    globalSession is something that is connected to Portlet applications. When your application works in a Portlet container it is built of some amount of portlets. Each portlet has its own session, but if you want to store variables global for all portlets in your application then you should store them in globalSession. This scope doesn't have any special effect different from the session scope in Servlet based applications.

Lookup Annotation
	Whenever we define a bean with lookup methods, Spring creates a subclass of the bean and overrides those methods which are marked as lookup-methods. And this subclassed bean gets registered into the context. The subclass delegates all the non-lookup methods to the original class. For the lookup methods, it overrides the implementation. So in our example, when getPrototypeBean() is called, it returns a new PrototypeBean instance.
	ObjectFactory?

DB datasource spring-boot
	Spring Boot will do all the heavy infrastructure plumbing for us. This includes creating an H2 DataSource implementation, which will be automatically handled by HikariCP, Apache Tomcat, or Commons DBCP, and setting up an in-memory database instance.

	Additionally, we won't even need to create an application.properties file, as Spring Boot will provide some default database settings as well.

Spring Data JPA
    It uses dynamic proxies: at runtime, it uses reflection to inspect all the additional methods defined in the repository interface, and creates a dynamic proxy, i.e. a class that implements this interface and uses the standard JPA API to implement the methods defined in the interface. It's a relatively advanced topic. Google for "Java dynamic proxy" to get you started. But you can also just use the framework without being able to write it yourself, just like you use a computer workithout understanding how electronics work.

Java JDK dynamic proxy
	https://medium.com/@spac.valentin/java-dynamic-proxy-mechanism-and-how-spring-is-using-it-93756fc707d5